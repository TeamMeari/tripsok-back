-------------------------------------------------------------------------------
-- PRECHECK: 기존 테이블(구조 분할의 소스)이 존재해야 함
-------------------------------------------------------------------------------
DECLARE
    v_cnt NUMBER := 0;
BEGIN
SELECT COUNT(*)
INTO v_cnt
FROM ALL_TABLES
WHERE OWNER = USER
  AND TABLE_NAME = 'PLACE_LCLS_CATEGORY';

IF v_cnt = 0 THEN
    RAISE_APPLICATION_ERROR(-20941, 'PLACE_LCLS_CATEGORY not found. Abort migration.');
END IF;
END;
/
-------------------------------------------------------------------------------
-- 1) 마스터(코드) 테이블 신규 생성: 이름 컬럼 없음
-------------------------------------------------------------------------------
CREATE TABLE PLACE_LCLS_CATEGORY_NEW
(
    ID               NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY
        CONSTRAINT PK_PLLC PRIMARY KEY,
    LCLS_SYSTM1_CODE VARCHAR2(10) NOT NULL,
    LCLS_SYSTM2_CODE VARCHAR2(20) NOT NULL,
    LCLS_SYSTM3_CODE VARCHAR2(20) NOT NULL,
    CONSTRAINT UQ_PLLC_CODES UNIQUE (LCLS_SYSTM1_CODE, LCLS_SYSTM2_CODE, LCLS_SYSTM3_CODE)
);

-------------------------------------------------------------------------------
-- 2) 번역(TR) 테이블 생성: 로케일별 이름 보관
-------------------------------------------------------------------------------
CREATE TABLE PLACE_LCLS_CATEGORY_TR
(
    CATEGORY_ID      NUMBER            NOT NULL,
    LOCALE           VARCHAR2(20 CHAR) NOT NULL,
    LCLS_SYSTM1_NAME VARCHAR2(100)     NOT NULL,
    LCLS_SYSTM2_NAME VARCHAR2(100)     NOT NULL,
    LCLS_SYSTM3_NAME VARCHAR2(200)     NOT NULL,

    CONSTRAINT CK_PLLCTR_LOCALE_LOWER CHECK (LOCALE = LOWER(LOCALE)),
    CONSTRAINT PK_PLLCTR PRIMARY KEY (CATEGORY_ID, LOCALE),
    CONSTRAINT FK_PLLCTR_CATEGORY
        FOREIGN KEY (CATEGORY_ID)
            REFERENCES PLACE_LCLS_CATEGORY_NEW (ID)
            ON DELETE CASCADE
);

-- 조회 최적화 인덱스
CREATE INDEX IX_PLLCTR_LOCALE ON PLACE_LCLS_CATEGORY_TR (LOCALE);

-------------------------------------------------------------------------------
-- 3) 마스터 테이블로 "코드"만 고유화하여 적재
-------------------------------------------------------------------------------
INSERT INTO PLACE_LCLS_CATEGORY_NEW (LCLS_SYSTM1_CODE, LCLS_SYSTM2_CODE, LCLS_SYSTM3_CODE)
SELECT DISTINCT LCLS_SYSTM1_CODE, LCLS_SYSTM2_CODE, LCLS_SYSTM3_CODE
FROM PLACE_LCLS_CATEGORY;

-------------------------------------------------------------------------------
-- 4) TR 테이블로 "이름 + 로케일" 이관 (LOCALE 강제 소문자)
-------------------------------------------------------------------------------
INSERT INTO PLACE_LCLS_CATEGORY_TR
(CATEGORY_ID, LOCALE, LCLS_SYSTM1_NAME, LCLS_SYSTM2_NAME, LCLS_SYSTM3_NAME)
SELECT m.ID,
       LOWER(o.LOCALE),
       o.LCLS_SYSTM1_NAME,
       o.LCLS_SYSTM2_NAME,
       o.LCLS_SYSTM3_NAME
FROM PLACE_LCLS_CATEGORY o
         JOIN PLACE_LCLS_CATEGORY_NEW m
              ON m.LCLS_SYSTM1_CODE = o.LCLS_SYSTM1_CODE
                  AND m.LCLS_SYSTM2_CODE = o.LCLS_SYSTM2_CODE
                  AND m.LCLS_SYSTM3_CODE = o.LCLS_SYSTM3_CODE;

-------------------------------------------------------------------------------
-- 5) 구(舊) 테이블 백업(rename) → 신규 테이블을 정식 이름으로 교체
-------------------------------------------------------------------------------
RENAME PLACE_LCLS_CATEGORY TO PLACE_LCLS_CATEGORY_OLD;
RENAME PLACE_LCLS_CATEGORY_NEW TO PLACE_LCLS_CATEGORY;

-------------------------------------------------------------------------------
-- 6) 하위 호환 뷰(옵션)
-------------------------------------------------------------------------------
CREATE OR REPLACE VIEW VW_PLACE_LCLS_CATEGORY AS
SELECT c.ID,
       c.LCLS_SYSTM1_CODE,
       t.LCLS_SYSTM1_NAME,
       c.LCLS_SYSTM2_CODE,
       t.LCLS_SYSTM2_NAME,
       c.LCLS_SYSTM3_CODE,
       t.LCLS_SYSTM3_NAME,
       t.LOCALE
FROM PLACE_LCLS_CATEGORY c
         JOIN PLACE_LCLS_CATEGORY_TR t
              ON t.CATEGORY_ID = c.ID;

-- 뷰/조인 가속 인덱스
CREATE INDEX IX_PLLC_L3CODE ON PLACE_LCLS_CATEGORY (LCLS_SYSTM3_CODE);

-------------------------------------------------------------------------------
-- 매핑 LOCALE 설정
-------------------------------------------------------------------------------
DECLARE
    v_locale VARCHAR2(20) := 'ko-kr';
BEGIN
v_locale := LOWER(v_locale);
DBMS_OUTPUT.PUT_LINE('CATEGORY mapping LOCALE = ' || v_locale);
END;
/
------------------------------------------------------------
-- 1) FK 컬럼 추가 (이미 있으면 무시)
------------------------------------------------------------
BEGIN
BEGIN
EXECUTE IMMEDIATE 'ALTER TABLE ACCOMMODATION ADD (PLACE_LCLS_CATEGORY_ID NUMBER(10))';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE != -1430 THEN RAISE;
END IF;
END;

BEGIN
EXECUTE IMMEDIATE 'ALTER TABLE TOUR ADD (PLACE_LCLS_CATEGORY_ID NUMBER(10))';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE != -1430 THEN RAISE;
END IF;
END;

BEGIN
EXECUTE IMMEDIATE 'ALTER TABLE RESTAURANT ADD (PLACE_LCLS_CATEGORY_ID NUMBER(10))';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE != -1430 THEN RAISE;
END IF;
END;
END;
/
------------------------------------------------------------
-- 2) TR 이름 매칭용 인덱스 (LOCALE, UPPER(TRIM(L3_NAME)))
------------------------------------------------------------
BEGIN
BEGIN
EXECUTE IMMEDIATE 'CREATE INDEX IX_PLLCTR_LOCALE_L3NAME_UPPER '||
      'ON PLACE_LCLS_CATEGORY_TR (LOCALE, UPPER(TRIM(LCLS_SYSTM3_NAME)))';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE;
END IF;
END;
END;
/
------------------------------------------------------------
-- 3) TR 중복 이름(동일 LOCALE 내 L3 이름이 여러 CATEGORY_ID)에 대한 사전 검증
------------------------------------------------------------
DECLARE
    v_locale VARCHAR2(20) := 'ko-kr';
v_dup_names  NUMBER := 0;
BEGIN
v_locale := LOWER(v_locale);

SELECT COUNT(*)
INTO v_dup_names
FROM (SELECT UPPER(TRIM(LCLS_SYSTM3_NAME)) AS NM
      FROM PLACE_LCLS_CATEGORY_TR
      WHERE LOCALE = v_locale
      GROUP BY UPPER(TRIM(LCLS_SYSTM3_NAME))
      HAVING COUNT(DISTINCT CATEGORY_ID) > 1);

IF v_dup_names > 0 THEN
    RAISE_APPLICATION_ERROR(-20014,
      'Ambiguous L3 names in TR for LOCALE='||v_locale||
      ' → '||v_dup_names||' duplicated name(s). Clean TR first.');
END IF;
END;
/
------------------------------------------------------------
-- 4) *_TYPE(문자열) → FK 매핑 (TR 기반, 대소문자/공백 무시)
------------------------------------------------------------
DECLARE
    v_locale VARCHAR2(20) := 'ko-kr';
BEGIN
v_locale := LOWER(v_locale);

MERGE INTO ACCOMMODATION a
USING (SELECT a.ID AID, c.ID CID
       FROM ACCOMMODATION a
                JOIN PLACE_LCLS_CATEGORY_TR tr ON tr.LOCALE = v_locale
                JOIN PLACE_LCLS_CATEGORY c ON c.ID = tr.CATEGORY_ID
       WHERE a.ACCOMMODATION_TYPE IS NOT NULL
         AND UPPER(TRIM(tr.LCLS_SYSTM3_NAME)) = UPPER(TRIM(a.ACCOMMODATION_TYPE))) m
ON (a.ID = m.AID)
WHEN MATCHED THEN
    UPDATE
    SET a.PLACE_LCLS_CATEGORY_ID = m.CID;

MERGE INTO TOUR t
USING (SELECT t.ID TID, c.ID CID
       FROM TOUR t
                JOIN PLACE_LCLS_CATEGORY_TR tr ON tr.LOCALE = v_locale
                JOIN PLACE_LCLS_CATEGORY c ON c.ID = tr.CATEGORY_ID
       WHERE t.TOUR_TYPE IS NOT NULL
         AND UPPER(TRIM(tr.LCLS_SYSTM3_NAME)) = UPPER(TRIM(t.TOUR_TYPE))) m
ON (t.ID = m.TID)
WHEN MATCHED THEN
    UPDATE
    SET t.PLACE_LCLS_CATEGORY_ID = m.CID;

MERGE INTO RESTAURANT r
USING (SELECT r.ID RID, c.ID CID
       FROM RESTAURANT r
                JOIN PLACE_LCLS_CATEGORY_TR tr ON tr.LOCALE = v_locale
                JOIN PLACE_LCLS_CATEGORY c ON c.ID = tr.CATEGORY_ID
       WHERE r.RESTAURANT_TYPE IS NOT NULL
         AND UPPER(TRIM(tr.LCLS_SYSTM3_NAME)) = UPPER(TRIM(r.RESTAURANT_TYPE))) m
ON (r.ID = m.RID)
WHEN MATCHED THEN
    UPDATE
    SET r.PLACE_LCLS_CATEGORY_ID = m.CID;
END;
/
------------------------------------------------------------
-- 5) 매핑 실패 잔여 건 검사
------------------------------------------------------------
DECLARE
    v_acc NUMBER;
v_tour NUMBER;
v_res NUMBER;
BEGIN
SELECT COUNT(*)
INTO v_acc
FROM ACCOMMODATION
WHERE ACCOMMODATION_TYPE IS NOT NULL
  AND PLACE_LCLS_CATEGORY_ID IS NULL;
SELECT COUNT(*)
INTO v_tour
FROM TOUR
WHERE TOUR_TYPE IS NOT NULL
  AND PLACE_LCLS_CATEGORY_ID IS NULL;
SELECT COUNT(*)
INTO v_res
FROM RESTAURANT
WHERE RESTAURANT_TYPE IS NOT NULL
  AND PLACE_LCLS_CATEGORY_ID IS NULL;

IF
    (v_acc + v_tour + v_res)
    > 0 THEN
    RAISE_APPLICATION_ERROR(-20001,
      'Category FK migration mismatch remains: ACC='||v_acc||', TOUR='||v_tour||', RES='||v_res);
END IF;
END;
/
------------------------------------------------------------
-- 6) NOT NULL 강제
------------------------------------------------------------
DECLARE
    v_acc NUMBER;
v_tour NUMBER;
v_res NUMBER;
BEGIN
SELECT COUNT(*)
INTO v_acc
FROM ACCOMMODATION
WHERE PLACE_LCLS_CATEGORY_ID IS NULL;
SELECT COUNT(*)
INTO v_tour
FROM TOUR
WHERE PLACE_LCLS_CATEGORY_ID IS NULL;
SELECT COUNT(*)
INTO v_res
FROM RESTAURANT
WHERE PLACE_LCLS_CATEGORY_ID IS NULL;

IF v_acc > 0 OR v_tour > 0 OR v_res > 0 THEN
    RAISE_APPLICATION_ERROR(-20002,
      'NULL FK exists: ACC='||v_acc||', TOUR='||v_tour||', RES='||v_res);
END IF;

BEGIN
EXECUTE IMMEDIATE 'ALTER TABLE ACCOMMODATION MODIFY PLACE_LCLS_CATEGORY_ID NOT NULL';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE != -1442 THEN RAISE;
END IF;
END;

BEGIN
EXECUTE IMMEDIATE 'ALTER TABLE TOUR MODIFY PLACE_LCLS_CATEGORY_ID NOT NULL';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE != -1442 THEN RAISE;
END IF;
END;

BEGIN
EXECUTE IMMEDIATE 'ALTER TABLE RESTAURANT MODIFY PLACE_LCLS_CATEGORY_ID NOT NULL';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE != -1442 THEN RAISE;
END IF;
END;
END;
/
------------------------------------------------------------
-- 7) 마스터 PK/UNIQUE 검사 (ID), FK 추가 전 owner 탐지
------------------------------------------------------------
DECLARE
    v_owner VARCHAR2(128);
v_nulls NUMBER := 0;
v_total NUMBER := 0;
v_dist  NUMBER := 0;
v_dup   NUMBER := 0;
v_pkcnt NUMBER := 0;
BEGIN
SELECT owner
INTO v_owner
FROM (SELECT owner
      FROM all_tab_columns
      WHERE table_name = 'PLACE_LCLS_CATEGORY'
        AND column_name = 'ID'
      ORDER BY CASE WHEN owner = USER THEN 0 ELSE 1 END)
WHERE ROWNUM = 1;

EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM '||v_owner||'.PLACE_LCLS_CATEGORY WHERE ID IS NULL'
    INTO v_nulls;
IF v_nulls > 0 THEN
    RAISE_APPLICATION_ERROR(-20011, 'PLACE_LCLS_CATEGORY.ID contains NULLs in '||v_owner);
END IF;

EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM '||v_owner||'.PLACE_LCLS_CATEGORY'
    INTO v_total;
EXECUTE IMMEDIATE 'SELECT COUNT(DISTINCT ID) FROM '||v_owner||'.PLACE_LCLS_CATEGORY'
    INTO v_dist;

v_dup := v_total - v_dist;
IF v_dup > 0 THEN
    RAISE_APPLICATION_ERROR(-20012, 'PLACE_LCLS_CATEGORY.ID has duplicates ('||v_dup||') in '||v_owner);
END IF;

SELECT COUNT(*)
INTO v_pkcnt
FROM all_constraints c
         JOIN all_cons_columns cc
              ON c.owner = cc.owner
                  AND c.constraint_name = cc.constraint_name
WHERE c.owner = v_owner
  AND c.table_name = 'PLACE_LCLS_CATEGORY'
  AND cc.column_name = 'ID'
  AND c.constraint_type IN ('P', 'U')
  AND c.status = 'ENABLED';

IF v_pkcnt = 0 THEN
    RAISE_APPLICATION_ERROR(-20013,
      'No ENABLED PK/UNIQUE on '||v_owner||'.PLACE_LCLS_CATEGORY(ID).');
END IF;

DBMS_OUTPUT.PUT_LINE('Resolved owner for PLACE_LCLS_CATEGORY = '||v_owner);
END;
/
------------------------------------------------------------
-- 7.5) FK 고아 정리(반드시 FK 추가 전에 실행)
------------------------------------------------------------
BEGIN
UPDATE ACCOMMODATION a
SET a.PLACE_LCLS_CATEGORY_ID = NULL
WHERE a.PLACE_LCLS_CATEGORY_ID IS NOT NULL
  AND NOT EXISTS (SELECT 1 FROM PLACE_LCLS_CATEGORY c WHERE c.ID = a.PLACE_LCLS_CATEGORY_ID);

UPDATE TOUR t
SET t.PLACE_LCLS_CATEGORY_ID = NULL
WHERE t.PLACE_LCLS_CATEGORY_ID IS NOT NULL
  AND NOT EXISTS (SELECT 1 FROM PLACE_LCLS_CATEGORY c WHERE c.ID = t.PLACE_LCLS_CATEGORY_ID);

UPDATE RESTAURANT r
SET r.PLACE_LCLS_CATEGORY_ID = NULL
WHERE r.PLACE_LCLS_CATEGORY_ID IS NOT NULL
  AND NOT EXISTS (SELECT 1 FROM PLACE_LCLS_CATEGORY c WHERE c.ID = r.PLACE_LCLS_CATEGORY_ID);
END;
/
------------------------------------------------------------
-- 8) FK 제약 추가 (존재하면 건너뜀)
------------------------------------------------------------
DECLARE
    v_owner VARCHAR2(128);
v_cnt   NUMBER;
BEGIN
SELECT owner
INTO v_owner
FROM (SELECT owner
      FROM all_tab_columns
      WHERE table_name = 'PLACE_LCLS_CATEGORY'
        AND column_name = 'ID'
      ORDER BY CASE WHEN owner = USER THEN 0 ELSE 1 END)
WHERE ROWNUM = 1;

-- ACCOMMODATION
SELECT COUNT(*)
INTO v_cnt
FROM ALL_CONSTRAINTS
WHERE owner = USER
  AND table_name = 'ACCOMMODATION'
  AND constraint_name = 'FK_ACCOMMODATION_CATEGORY';
IF v_cnt = 0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE ACCOMMODATION '||
      'ADD CONSTRAINT FK_ACCOMMODATION_CATEGORY '||
      'FOREIGN KEY (PLACE_LCLS_CATEGORY_ID) '||
      'REFERENCES '||v_owner||'.PLACE_LCLS_CATEGORY (ID)';
END IF;

-- TOUR
SELECT COUNT(*)
INTO v_cnt
FROM ALL_CONSTRAINTS
WHERE owner = USER
  AND table_name = 'TOUR'
  AND constraint_name = 'FK_TOUR_CATEGORY';
IF v_cnt = 0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE TOUR '||
      'ADD CONSTRAINT FK_TOUR_CATEGORY '||
      'FOREIGN KEY (PLACE_LCLS_CATEGORY_ID) '||
      'REFERENCES '||v_owner||'.PLACE_LCLS_CATEGORY (ID)';
END IF;

-- RESTAURANT
SELECT COUNT(*)
INTO v_cnt
FROM ALL_CONSTRAINTS
WHERE owner = USER
  AND table_name = 'RESTAURANT'
  AND constraint_name = 'FK_RESTAURANT_CATEGORY';
IF v_cnt = 0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE RESTAURANT '||
      'ADD CONSTRAINT FK_RESTAURANT_CATEGORY '||
      'FOREIGN KEY (PLACE_LCLS_CATEGORY_ID) '||
      'REFERENCES '||v_owner||'.PLACE_LCLS_CATEGORY (ID)';
END IF;
END;
/
------------------------------------------------------------
-- 9) FK 컬럼 인덱스 (이미 있으면 무시)
------------------------------------------------------------
BEGIN
BEGIN
EXECUTE IMMEDIATE 'CREATE INDEX IDX_ACC_CATEGORY_ID ON ACCOMMODATION (PLACE_LCLS_CATEGORY_ID)';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE;
END IF;
END;

BEGIN
EXECUTE IMMEDIATE 'CREATE INDEX IDX_TOUR_CATEGORY_ID ON TOUR (PLACE_LCLS_CATEGORY_ID)';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE;
END IF;
END;

BEGIN
EXECUTE IMMEDIATE 'CREATE INDEX IDX_RES_CATEGORY_ID ON RESTAURANT (PLACE_LCLS_CATEGORY_ID)';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE != -955 THEN RAISE;
END IF;
END;
END;
/
------------------------------------------------------------
-- 10) 기존 문자열 컬럼 삭제 (없으면 무시)
------------------------------------------------------------
BEGIN
BEGIN
EXECUTE IMMEDIATE 'ALTER TABLE ACCOMMODATION DROP COLUMN ACCOMMODATION_TYPE';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE NOT IN (-904, -1418, -1430) THEN RAISE;
END IF;
END;

BEGIN
EXECUTE IMMEDIATE 'ALTER TABLE TOUR DROP COLUMN TOUR_TYPE';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE NOT IN (-904, -1418, -1430) THEN RAISE;
END IF;
END;

BEGIN
EXECUTE IMMEDIATE 'ALTER TABLE RESTAURANT DROP COLUMN RESTAURANT_TYPE';
EXCEPTION WHEN OTHERS THEN
    IF SQLCODE NOT IN (-904, -1418, -1430) THEN RAISE;
END IF;
END;
END;
/
